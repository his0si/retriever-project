events {
    worker_connections 1024;
}

http {
    upstream frontend {
        server rag-frontend:3000;
    }

    upstream api {
        server rag-api:8000;
    }

    # HTTP server (redirect to HTTPS, keep /health for healthcheck)
    server {
        listen 80;
        server_name ${DOMAIN_NAME};

        # Health check remains on HTTP for container healthcheck
        location = /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS server (SSL 인증서가 없으면 자동으로 실패하지만 포트는 열림)
    server {
        listen 443 ssl http2;
        server_name ${DOMAIN_NAME};

        # SSL configuration (인증서가 없으면 에러 발생)
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # NextAuth API routes (프론트엔드에서 처리)
        location /api/auth/ {
            proxy_pass http://frontend/api/auth/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
        }

        # Next.js API routes (프론트엔드에서 처리)
        location /api/ {
            proxy_pass http://frontend/api/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
            
            # 캐싱 비활성화 (데이터베이스 상태 등 실시간 정보용)
            proxy_no_cache 1;
            proxy_cache_bypass 1;
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # Backend API routes (직접 백엔드 접근용)
        location /backend/ {
            proxy_pass http://api/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
        }

        # RabbitMQ Management Interface (관리자 전용)
        location /rabbitmq {
            return 301 /rabbitmq/;
        }

        location /rabbitmq/ {
            # 사용자의 개인 서버이므로 보안 설정 - 특정 IP만 허용
            allow 121.131.184.0/24;  # 사용자 네트워크 대역
            allow 192.168.0.0/24;    # 로컬 네트워크 대역
            allow 222.110.177.0/24;  # 사용자 실제 접근 IP 대역
            allow 127.0.0.1;         # 로컬호스트
            deny all;

            proxy_pass http://rag-rabbitmq:15672/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;

            # RabbitMQ Management UI를 위한 추가 헤더
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;

            # 정적 리소스 처리
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                proxy_pass http://rag-rabbitmq:15672;
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
        }

        # Health check
        location = /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Frontend proxy (마지막에 위치해야 함)
        location / {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
        }
    }
} 